/**
 * Enhanced AI Features Example
 *
 * This example demonstrates the advanced AI capabilities available in the SuperDapp SDK,
 * including guardrails, human-in-the-loop approval, tracing, and parallel agent execution.
 */

import { SuperDappAgent, createBotConfig } from '../src/index';
import { createEnhancedAIClient } from '../src/ai/enhanced-client';

async function main() {
  console.log('ðŸ¤– SuperDapp Enhanced AI Features Demo');

  // Create an enhanced AI client with tracing enabled
  const enhancedAI = await createEnhancedAIClient({
    provider: 'openai',
    model: 'gpt-4o-mini',
    apiKey: process.env.AI_API_KEY,
  });

  // Enable tracing for debugging and monitoring
  enhancedAI.setTracing(true);

  console.log('\nðŸ“Š Example 1: Agent with Guardrails');
  try {
    const result1 = await enhancedAI.runEnhancedAgent({
      instructions: 'You are a helpful coding assistant.',
      messages: [
        {
          role: 'user',
          content: 'Help me write a function to validate user input',
        },
      ],
      guardrails: {
        inputValidation: {
          maxLength: 1000,
          bannedWords: ['hack', 'exploit'],
        },
        outputValidation: {
          maxLength: 2000,
          bannedWords: ['sudo', 'rm -rf'],
          requireApproval: false, // Set to true for human approval
        },
      },
    });

    console.log('Response:', result1.outputText.substring(0, 200) + '...');
    console.log('Tracing events:', result1.tracing?.events.length || 0);
  } catch (error) {
    console.error('Guardrails example failed:', error.message);
  }

  console.log('\nðŸŽ¯ Example 2: Parallel Agent Execution');
  try {
    const parallelResult = await enhancedAI.runParallelAgents([
      {
        instructions: 'You are a creative writer.',
        messages: [{ role: 'user', content: 'Write a short poem about AI' }],
      },
      {
        instructions: 'You are a technical writer.',
        messages: [{ role: 'user', content: 'Explain AI in simple terms' }],
      },
      {
        instructions: 'You are a philosopher.',
        messages: [
          { role: 'user', content: 'What does AI mean for humanity?' },
        ],
      },
    ]);

    console.log(
      'Best result (index',
      parallelResult.best.index + '):',
      parallelResult.best.outputText.substring(0, 150) + '...'
    );
    console.log('Total agents executed:', parallelResult.results.length);
  } catch (error) {
    console.error('Parallel agents example failed:', error.message);
  }

  console.log('\nðŸ“¡ Example 3: Streaming Agent Events');
  try {
    console.log('Streaming events:');
    for await (const event of enhancedAI.streamAgentEvents({
      instructions: 'You are a helpful assistant.',
      messages: [{ role: 'user', content: 'What is 2+2?' }],
    })) {
      console.log(`  [${event.type}] ${event.timestamp.toISOString().substring(11, 19)}: 
                   ${typeof event.data === 'string' ? event.data.substring(0, 100) : JSON.stringify(event.data).substring(0, 100)}`);
    }
  } catch (error) {
    console.error('Streaming example failed:', error.message);
  }

  console.log('\nðŸ”§ Example 4: Integration with SuperDapp Agent');
  const agent = new SuperDappAgent(createBotConfig());

  // Add a command that uses enhanced AI features
  agent.addCommand('/enhanced-ask', async ({ message, roomId }) => {
    try {
      const prompt =
        typeof message.body.m === 'string'
          ? message.body.m.split(' ').slice(1).join(' ')
          : 'Hello';

      const result = await enhancedAI.runEnhancedAgent({
        instructions:
          'You are a helpful SuperDapp AI assistant. Be concise and friendly.',
        messages: [{ role: 'user', content: prompt }],
        guardrails: {
          inputValidation: {
            maxLength: 500,
            bannedWords: ['spam', 'scam'],
          },
          outputValidation: {
            maxLength: 1000,
          },
        },
        enableTracing: true,
      });

      await agent.sendConnectionMessage(roomId, result.outputText);

      // Log tracing data for monitoring
      if (result.tracing) {
        console.log(
          `Command executed with ${result.tracing.events.length} traced events`
        );
      }
    } catch (error) {
      await agent.sendConnectionMessage(
        roomId,
        'Sorry, I encountered an error processing your request. Please try again.'
      );
      console.error('Enhanced command error:', error);
    }
  });

  console.log('\nâœ… Enhanced AI features demo completed');
  console.log('\nAvailable features:');
  console.log('  âœ… Input/Output Guardrails');
  console.log('  âœ… Parallel Agent Execution');
  console.log('  âœ… Real-time Event Streaming');
  console.log('  âœ… Comprehensive Tracing');
  console.log('  âœ… Integration with SuperDapp Agents');
  console.log('  ðŸš§ Human-in-the-Loop (requires callback implementation)');
  console.log('  ðŸš§ Agent Handoffs (requires OpenAI Agents SDK update)');

  // Display tracing summary
  const tracingData = enhancedAI.getTracingData();
  if (tracingData) {
    console.log('\nðŸ“Š Final Tracing Summary:');
    console.log(`  Session: ${tracingData.sessionId}`);
    console.log(`  Events: ${tracingData.events.length}`);
    console.log(`  Duration: ${tracingData.duration}ms`);
  }
}

// Run the demo if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
}

export { main as runEnhancedAIDemo };
