/**
 * Enhanced OpenAI Agents Example
 * 
 * This example demonstrates how to use the OpenAI Agents SDK integration
 * with the SuperDapp Agents SDK. It shows configuration, tools, handoffs,
 * and parallel execution capabilities.
 * 
 * To use this example:
 * 1. Install the OpenAI Agents SDK: npm install @openai/agents
 * 2. Set environment variables:
 *    - AI_PROVIDER=openai
 *    - AI_MODEL=gpt-4
 *    - AI_API_KEY=sk-...
 *    - SUPERDAPP_AI_AGENTS=1
 * 3. Run: tsx examples/ai/enhanced-agents-openai.ts.example
 */

import { createEnhancedAIClient, EnhancedAgentRunOptions } from '../../src/ai/enhanced-client';
import type { AIConfig } from '../../src/ai/config';

async function main() {
  try {
    // Example 1: Basic OpenAI Agents usage with feature flag
    console.log('🚀 Example 1: Basic OpenAI Agents Integration');
    
    const config: AIConfig = {
      provider: 'openai',
      model: 'gpt-4',
      apiKey: process.env.AI_API_KEY || 'your-api-key-here',
      agents: {
        enabled: true, // Enable OpenAI Agents SDK
        streaming: false,
        maxTurns: 5,
      },
    };

    const client = await createEnhancedAIClient(config);
    
    const basicOptions: EnhancedAgentRunOptions = {
      instructions: 'You are a helpful assistant that provides concise answers.',
      messages: [
        { role: 'user', content: 'What is the capital of France?' },
      ],
    };

    const result1 = await client.runEnhancedAgent(basicOptions);
    console.log('✅ Basic Result:', result1.outputText);
    console.log('📊 Tracing:', result1.tracing?.events.length, 'events');

    // Example 2: Agent with tools
    console.log('\n🛠️  Example 2: Agent with Tools');
    
    const toolsOptions: EnhancedAgentRunOptions = {
      instructions: 'You are a helpful assistant with access to calculation tools.',
      messages: [
        { role: 'user', content: 'Calculate the square root of 144' },
      ],
      tools: {
        calculate: {
          type: 'function',
          function: {
            name: 'calculate',
            description: 'Perform mathematical calculations',
            parameters: {
              type: 'object',
              properties: {
                expression: {
                  type: 'string',
                  description: 'Mathematical expression to evaluate',
                },
              },
              required: ['expression'],
            },
          },
        },
      },
    };

    const result2 = await client.runEnhancedAgent(toolsOptions);
    console.log('🔧 Tools Result:', result2.outputText);

    // Example 3: Agent with guardrails
    console.log('\n🛡️  Example 3: Agent with Guardrails');
    
    const guardrailsOptions: EnhancedAgentRunOptions = {
      instructions: 'You are a content moderator assistant.',
      messages: [
        { role: 'user', content: 'Tell me about healthy cooking tips' },
      ],
      guardrails: {
        inputValidation: {
          maxLength: 1000,
          bannedWords: ['inappropriate', 'harmful'],
        },
        outputValidation: {
          maxLength: 500,
          bannedWords: ['dangerous', 'harmful'],
          requireApproval: false,
        },
      },
    };

    const result3 = await client.runEnhancedAgent(guardrailsOptions);
    console.log('🛡️ Guardrails Result:', result3.outputText);

    // Example 4: Streaming agent events
    console.log('\n📡 Example 4: Streaming Agent Events');
    
    const streamingConfig: AIConfig = {
      ...config,
      agents: {
        ...config.agents,
        streaming: true, // Enable streaming
      },
    };

    const streamingClient = await createEnhancedAIClient(streamingConfig);
    
    const streamingOptions: EnhancedAgentRunOptions = {
      instructions: 'You are a storyteller. Tell a very short story about a robot.',
      enableTracing: true,
    };

    console.log('📡 Streaming events:');
    for await (const event of streamingClient.streamAgentEvents(streamingOptions)) {
      console.log(`  [${event.timestamp.toISOString()}] ${event.type}:`, 
        typeof event.data === 'string' ? event.data : JSON.stringify(event.data));
      
      // Stop after a few events for demo purposes
      if (event.type === 'done' || event.type === 'text') {
        break;
      }
    }

    // Example 5: Parallel agents execution
    console.log('\n⚡ Example 5: Parallel Agents Execution');
    
    const parallelConfigs: EnhancedAgentRunOptions[] = [
      {
        instructions: 'You are a creative writer. Write a haiku about technology.',
        config: { temperature: 0.9 },
      },
      {
        instructions: 'You are a technical writer. Explain AI in one sentence.',
        config: { temperature: 0.3 },
      },
      {
        instructions: 'You are a philosopher. Give a brief thought about progress.',
        config: { temperature: 0.7 },
      },
    ];

    const parallelResults = await client.runParallelAgents(parallelConfigs);
    console.log('⚡ Parallel Results:');
    parallelResults.results.forEach((result, index) => {
      console.log(`  Agent ${index + 1}:`, result.outputText);
    });
    console.log('🏆 Best result:', parallelResults.best.outputText);

    // Example 6: Fallback behavior when Agents SDK not available
    console.log('\n🔄 Example 6: Testing Fallback Behavior');
    
    const fallbackConfig: AIConfig = {
      provider: 'openai',
      model: 'gpt-4',
      apiKey: process.env.AI_API_KEY || 'your-api-key-here',
      agents: {
        enabled: false, // Explicitly disable to test fallback
      },
    };

    const fallbackClient = await createEnhancedAIClient(fallbackConfig);
    
    const fallbackResult = await fallbackClient.runEnhancedAgent({
      instructions: 'You are a helpful assistant.',
      messages: [{ role: 'user', content: 'Say hello!' }],
    });
    
    console.log('🔄 Fallback Result:', fallbackResult.outputText);
    console.log('📋 Fallback used basic generateText path');

  } catch (error) {
    console.error('❌ Error:', error instanceof Error ? error.message : String(error));
    
    if (error instanceof Error && error.message.includes('OpenAI Agents SDK')) {
      console.log('\n💡 Tip: Install OpenAI Agents SDK with: npm install @openai/agents');
      console.log('💡 Or disable agents with SUPERDAPP_AI_AGENTS=0');
    }
  }
}

// Handle different environments
if (require.main === module) {
  main().catch(console.error);
}

export { main };